// WARNING: DO NOT EDIT THIS FILE, IT IS AUTOGENERATED
module.exports = {
  addonType: "plugin",
  id: "skymen_callfunctionmap",
  name: "Call Function Map",
  version: "1.0.0.0",
  category:
    // "3d",
    // "data-and-storage",
    // "form-controls",
    // "input",
    // "media",
    // "monetisation",
    // "platform-specific",
    // "web",
    // "other"
    "general",
  author: "skymen",
  website: "https://www.construct.net",
  documentation: "https://www.construct.net",
  description: "Description",
  // addonUrl: "https://www.construct.net/en/make-games/addons/####/XXXX", // displayed in auto-generated docs
  // githubUrl: "https://github.com/skymen/XXXX", // displays latest release version in auto-generated docs
  // icon: "icon.svg", // defaults to "icon.svg" if omitted
  type: "object", // world, object, dom
  domSideScripts: [
    // "domSide.js", // no need to include "c3runtime/" prefix
  ],
  fileDependencies: [
    /*
    {
      filename: "filename.js", // no need to include "c3runtime/" prefix
      type:
        "copy-to-output"
        "inline-script"
        "external-dom-script"
        "external-runtime-script"
        "external-css"

      // for copy-to-output only
      // fileType: "image/png"
    }
    */
  ],
  info: {
    // world only
    defaultImageUrl: null,
    Set: {
      // world only
      IsResizable: false,
      IsRotatable: false,
      Is3D: false,
      HasImage: false,
      IsTiled: false,
      SupportsZElevation: false,
      SupportsColor: false,
      SupportsEffects: false,
      MustPreDraw: false,

      // object only
      IsSingleGlobal: true,

      // world and object
      CanBeBundled: true,
      IsDeprecated: false,
      GooglePlayServicesEnabled: false,
    },
    AddCommonACEs: {
      // world only
      Position: false,
      SceneGraph: false,
      Size: false,
      Angle: false,
      Appearance: false,
      ZOrder: false,
    },
  },
  properties: [
    /*
    {
      type:
        "integer"
        "float"
        "percent"
        "text"
        "longtext"
        "check"
        "font"
        "combo"
        "color"
        "object"
        "group"
        "link"
        "info"

      id: "property_id",
      options: {
        initialValue: 0,
        interpolatable: false,

        // minValue: 0, // omit to disable
        // maxValue: 100, // omit to disable

        // for type combo only
        // items: [
        //   {itemId1: "item name1" },
        //   {itemId2: "item name2" },
        // ],

        // dragSpeedMultiplier: 1, // omit to disable

        // for type object only
        // allowedPluginIds: ["Sprite", "<world>"],

        // for type link only
        // linkCallback: `function(instOrObj) {}`,
        // linkText: "Link Text",
        // callbackType:
        //   "for-each-instance"
        //   "once-for-type"

        // for type info only
        // infoCallback: `function(inst) {}`,
      },
      name: "Property Name",
      desc: "Property Description",
    }
    */
    {
      type: "check",
      id: "mode",
      options: {
        initialValue: false,
      },
      name: "Automatic Mode",
      desc: "When enabled, the plugin will auto detect which functions to call based on the function name. If disabled, the user needs to define which functions to call in a map.",
    },
    {
      type: "longtext",
      id: "maps",
      options: {
        initialValue: "",
      },
      name: "Maps",
      desc: "A list of map names, one per line. When auto mode is enabled, these will be used to auto fill the function names.",
    },
  ],
  aceCategories: {
    // follows the format id: langName
    // in the ACEs refer to categories using the id, not the name
    general: "General",
  },
  Acts: {
    /*
    SampleAction: {
      // The category of the action as it appears in the add action dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this action
      // Cases where you might not want this are:
      // 1- If the action params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the action in the add action dialog
      highlight: true,

      // Set to true to hide the action in the interface. False by default if not specified.
      deprecated: false,

      // Marks the action as async. Defaults to false if not specified.
      isAsync: false,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the action as it appears in the add action dialog
      listName: "Sample Action",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      displayText: "Sample action [i]{0}[/i]",

      // The description of the action as it appears in the add action dialog
      description: "This is a sample action",
    },
    */
    AddFunctionToMap: {
      category: "general",
      forward: "_AddFunctionToMap",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
        {
          id: "map",
          name: "Map Name",
          desc: "The map to attach the function to.",
          type: "string",
          value: "",
        },
      ],
      listName: "Add Function To Map",
      displayText: "Add function [i]{0}[/i] to map [i]{1}[/i]",
      description: "Add a function to a map.",
    },
    RemoveFunctionFromMap: {
      category: "general",
      forward: "_RemoveFunctionFromMap",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
        {
          id: "map",
          name: "Map Name",
          desc: "The map to attach the function to.",
          type: "string",
          value: "",
        },
      ],
      listName: "Remove Function From Map",
      displayText: "Remove function [i]{0}[/i] from map [i]{1}[/i]",
      description: "Remove a function from a map.",
    },
    ClearMap: {
      category: "general",
      forward: "_ClearMap",
      autoScriptInterface: true,
      params: [
        {
          id: "map",
          name: "Map Name",
          desc: "The map to clear.",
          type: "string",
          value: "",
        },
      ],
      listName: "Clear Map",
      displayText: "Clear map [i]{0}[/i]",
      description: "Clear a map.",
    },
    RemoveFunctionFromAllMaps: {
      category: "general",
      forward: "_RemoveFunctionFromAllMaps",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
      ],
      listName: "Remove Function From All Maps",
      displayText: "Remove function [i]{0}[/i] from all maps",
      description: "Remove a function from all maps.",
    },
    EnableFunctionInMap: {
      category: "general",
      forward: "_EnableFunctionInMap",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
        {
          id: "map",
          name: "Map Name",
          desc: "The map to attach the function to.",
          type: "string",
          value: "",
        },
        {
          id: "enable",
          name: "Enable",
          desc: "Enable or disable the function.",
          type: "boolean",
          value: false,
        },
      ],
      listName: "Disable Function In Map",
      displayText: "Set function [i]{0}[/i] in map [i]{1}[/i] to [i]{2}[/i]",
      description: "Enable a function in a map.",
    },
    EnableFunction: {
      category: "general",
      forward: "_EnableFunction",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
        {
          id: "enable",
          name: "Enable",
          desc: "Enable or disable the function.",
          type: "boolean",
          value: false,
        },
      ],
      listName: "Disable Function From All Maps",
      displayText: "Set function [i]{0}[/i] from all maps to [i]{1}[/i]",
      description: "Enable a function from all maps.",
    },
    EnableMap: {
      category: "general",
      forward: "_EnableMap",
      autoScriptInterface: true,
      params: [
        {
          id: "map",
          name: "Map Name",
          desc: "The map to attach the function to.",
          type: "string",
          value: "",
        },
        {
          id: "enable",
          name: "Enable",
          desc: "Enable or disable the function.",
          type: "boolean",
          value: false,
        },
      ],
      listName: "Disable Map",
      displayText: "Set map [i]{0}[/i] to [i]{1}[/i]",
      description: "Disable a map.",
    },
    CallMap: {
      category: "general",
      forward: "_CallMap",
      autoScriptInterface: true,
      highlight: true,
      params: [
        {
          id: "map",
          name: "Map Name",
          desc: "The map to call.",
          type: "string",
          value: "",
        },
        {
          id: "params",
          name: "Forward Parameters",
          desc: "The parameters to pass to the function.",
          type: "number",
          value: "0",
        },
      ],
      listName: "Call Map",
      displayText: "Call map [i]{0}[/i] ({1} parameters)",
      description: "Call a map.",
    },
  },
  Cnds: {
    /*
    SampleCondition: {
      // The category of the action as it appears in the add condition dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this condition
      // Cases where you might not want this are:
      // 1- If the condition params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the condition in the add condition dialog
      highlight: true,

      // Set to true to hide the condition in the interface. False by default if not specified.
      deprecated: false,

      // special conditions properties. These can all be omitted, and they will default to the following values:
      isTrigger: false,
      isFakeTrigger: false,
      isStatic: false,
      isLooping: false,
      isInvertible: true,
      isCompatibleWithTriggers: true,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the condition as it appears in the add condition dialog
      listName: "Sample Condition",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      displayText: "Sample condition [i]{0}[/i]",

      // The description of the condition as it appears in the add condition dialog
      description: "This is a sample condition",
    },
    */
    IsMapEnabled: {
      category: "general",
      forward: "_IsMapEnabled",
      autoScriptInterface: true,
      params: [
        {
          id: "map",
          name: "Map Name",
          desc: "The map to check.",
          type: "string",
          value: "",
        },
      ],
      listName: "Is Map Enabled",
      displayText: "Is map [i]{0}[/i] enabled",
      description: "Check if a map is enabled.",
    },
    IsFunctionEnabledInMap: {
      category: "general",
      forward: "_IsFunctionEnabledInMap",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
        {
          id: "map",
          name: "Map Name",
          desc: "The map to attach the function to.",
          type: "string",
          value: "",
        },
      ],
      listName: "Is Function Enabled In Map",
      displayText: "Is function [i]{0}[/i] enabled in map [i]{1}[/i]",
      description: "Check if a function is enabled in a map.",
    },
    IsFunctionEnabled: {
      category: "general",
      forward: "_IsFunctionEnabled",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
      ],
      listName: "Is Function Enabled",
      displayText: "Is function [i]{0}[/i] enabled",
      description: "Check if a function is enabled.",
    },
    DoesMapExist: {
      category: "general",
      forward: "_DoesMapExist",
      autoScriptInterface: true,
      params: [
        {
          id: "map",
          name: "Map Name",
          desc: "The map to check.",
          type: "string",
          value: "",
        },
      ],
      listName: "Does Map Exist",
      displayText: "Does map [i]{0}[/i] exist",
      description: "Check if a map exists.",
    },
    DoesFunctionExist: {
      category: "general",
      forward: "_DoesFunctionExist",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
      ],
      listName: "Does Function Exist",
      displayText: "Does function [i]{0}[/i] exist",
      description: "Check if a function exists.",
    },
    IsFunctionInMap: {
      category: "general",
      forward: "_IsFunctionInMap",
      autoScriptInterface: true,
      params: [
        {
          id: "name",
          name: "Function Name",
          desc: "The name of the function to call.",
          type: "string",
          value: "",
        },
        {
          id: "map",
          name: "Map Name",
          desc: "The map to attach the function to.",
          type: "string",
          value: "",
        },
      ],
      listName: "Is Function In Map",
      displayText: "Is function [i]{0}[/i] in map [i]{1}[/i]",
      description: "Check if a function is in a map.",
    },
  },
  Exps: {
    /*
    SampleExpression: {
      // The category of the action as it appears in the expression picker
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this expression
      // Cases where you might not want this are:
      // 1- If you don't want it to appear in the script interface
      // 2- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the expression in the expression picker
      highlight: true,

      // Set to true to hide the expression in the interface. False by default if not specified.
      deprecated: false,

      // The type of the expression.
      returnType:
        - "string"
        - "number"
        - "any" // must be either string or number

      // Set to true if the expression is variadic. False by default if not specified.
      isVariadicParameters: false

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
        },
      ],

      // The description of the expression as it appears in the expression picker
      description: "This is a sample expression",
    },
    */
  },
};
